/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);
	__webpack_require__(3);
	__webpack_require__(4); 
	
	__webpack_require__(5);
	//require('./js/prefabs/Blueprints/HouseBp.js');        
	//require('./js/prefabs/Blueprints/MiningPoint.js');
	
	
	__webpack_require__(6);
	__webpack_require__(7);
	__webpack_require__(8);
	
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(14);
	__webpack_require__(15);
	__webpack_require__(16);
	__webpack_require__(17);
	__webpack_require__(18);
	
	     
	__webpack_require__(19);
	__webpack_require__(20);
	__webpack_require__(21);
	
	__webpack_require__(22);

/***/ },
/* 1 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.Prefab = function (game_state, name, position, properties) {
	    "use strict";
	    Phaser.Sprite.call(this, game_state.game, position.x, position.y, properties.texture);
	    
	    this.game_state = game_state;
	    
	    this.name = name;
	    
	    this.game_state.groups[properties.group].add(this);
	    this.frame = +properties.frame;
	    
	    if (properties.scale) {
	        this.scale.setTo(properties.scale.x, properties.scale.y);
	    }
	    
	    this.game_state.prefabs[name] = this;
	};
	
	Muryoma.Prefab.prototype = Object.create(Phaser.Sprite.prototype);
	Muryoma.Prefab.prototype.constructor = Muryoma.Prefab;
	
	Muryoma.Prefab.prototype.render = function(){
	    //"use strict";    
	    //game.debug.body(this);    
	};
	


/***/ },
/* 2 */
/***/ function(module, exports) {

	console.log('TilePrefab');
	var Muryoma = Muryoma || {};
	
	Muryoma.TilePrefab = function (game_state, name, position, properties) {
	    "use strict";
	    Phaser.TileSprite.call(this, game_state.game, position.x, position.y, properties.width, properties.height, properties.texture);
	    
	    this.game_state = game_state;
	    
	    this.name = name;
	    
	    this.game_state.groups[properties.group].add(this);
	    this.frame = +properties.frame;
	    
	    this.game_state.prefabs[name] = this;
	};
	
	Muryoma.TilePrefab.prototype = Object.create(Phaser.TileSprite.prototype);
	Muryoma.TilePrefab.prototype.constructor = Muryoma.TilePrefab;

/***/ },
/* 3 */
/***/ function(module, exports) {

	console.log('TextPrefab');
	var Muryoma = Muryoma || {};
	
	Muryoma.TextPrefab = function (game_state, name, position, properties) {
	    "use strict";
	    Phaser.Text.call(this, game_state.game, position.x, position.y, properties.text, properties.style);
	    
	    this.game_state = game_state;
	    
	    this.name = name;
	    
	    this.game_state.groups[properties.group].add(this);
	    
	    this.game_state.prefabs[name] = this;
	};
	
	Muryoma.TextPrefab.prototype = Object.create(Phaser.Text.prototype);
	Muryoma.TextPrefab.prototype.constructor = Muryoma.TextPrefab;

/***/ },
/* 4 */
/***/ function(module, exports) {

	console.log('Utils');
	var Muryoma = Muryoma || {};
	
	Muryoma.create_prefab_from_pool = function (pool, prefab_constructor, game_state, prefab_name, prefab_position, prefab_properties) {
	    "use strict";
	    var prefab;
	    // get the first dead prefab from the pool
	    prefab = pool.getFirstDead();
	    if (!prefab) {
	        // if there is no dead prefab, create a new one
	        prefab = new prefab_constructor(game_state, prefab_name, prefab_position, prefab_properties);
	    } else {
	        // if there is a dead prefab, reset it in the new position
	        prefab.reset(prefab_position.x, prefab_position.y);
	    }
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	console.log('Blueprint');
	var Muryoma = Muryoma || {};
	console.log("Muryoma ", Muryoma);
	
	Muryoma.Blueprint = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.Prefab.call(this, game_state, name, position, properties);    
	    this.stats = properties.stats;
	    this.inputEnabled = true;
	    this.events.onInputOver.add(this.inputOver, this);
	    this.events.onInputOut.add(this.inputOut, this);
	    this.events.onInputDown.add(this.onInputDown, this);
	};
	
	Muryoma.Blueprint.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.Blueprint.prototype.constructor = Muryoma.Blueprint;
	
	Muryoma.Blueprint.prototype.restore_tint = function () {
	    "use strict";
	    this.tint = 0xFFFFFF;
	};
	
	Muryoma.Blueprint.prototype.inputOver = function() {
	    "use strict";
	    console.log('BP inputOver');
	};
	
	Muryoma.Blueprint.prototype.inputOut = function() {
	    "use strict";
	    console.log('BP inputOut');
	};
	
	Muryoma.Blueprint.prototype.onInputDown = function() {
	    "use strict";
	    console.log('onInputDown');
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	console.log('Building');
	var Muryoma = Muryoma || {};
	
	Muryoma.Building = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.Prefab.call(this, game_state, name, position, properties);   
	    this.inputEnabled = true;  
	    this.enableBody = true;      
	    
	    //this.events.onInputOver.add(this.inputOver, this);
	    //this.events.onInputOut.add(this.inputOut, this);
	    //this.events.onInputDown.add(this.onInputDown, this);
	};
	
	Muryoma.Building.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.Building.prototype.constructor = Muryoma.Building;
	
	Muryoma.Building.prototype.inputOver = function() {
	    "use strict";
	    console.log('Building inputOver');
	};
	
	Muryoma.Building.prototype.inputOut = function() {
	    "use strict";
	    console.log('Building inputOut');
	};
	
	Muryoma.Building.prototype.onInputDown = function() {
	    "use strict";
	    console.log('Building onInputDown');
	};
	
	console.log('Building2');
	


/***/ },
/* 7 */
/***/ function(module, exports) {

	console.log('MenuItem');
	var Muryoma = Muryoma || {};
	
	Muryoma.MenuItem = function (game_state, name, position, properties) {
	    "use strict";    
	    Muryoma.TextPrefab.call(this, game_state, name, position, properties);
	    
	    this.inputEnabled = true;
	    //this.events.onInputOver.add(this.inputOver, this);
	    //this.events.onInputOut.add(this.inputOut, this);
	    //this.events.onInputDown.add(this.onInputDown, this);    
	};
	
	Muryoma.MenuItem.prototype = Object.create(Muryoma.TextPrefab.prototype);
	Muryoma.MenuItem.prototype.constructor = Muryoma.MenuItem;
	
	Muryoma.MenuItem.prototype.selection_over = function () {
	    "use strict";
	    this.fill = "#FFFF00";
	};
	
	Muryoma.MenuItem.prototype.selection_out = function () {
	    "use strict";
	    this.fill = "#FFFFFF";
	};
	/*
	Muryoma.MenuItem.prototype.inputOver = function() {
	    "use strict";
	    console.log('inputOver');
	};
	
	Muryoma.MenuItem.prototype.inputOut = function() {
	    "use strict";
	    console.log('inputOut');
	  
	};
	*/
	Muryoma.MenuItem.prototype.onInputDown = function() {
	    "use strict";
	    //console.log('onInputDown');
	    //console.log('game_state ', this.parent);    
	};


/***/ },
/* 8 */
/***/ function(module, exports) {

	console.log('Menu');
	
	var Muryoma = Muryoma || {};
	
	Muryoma.Menu = function (game_state, name, position, properties) {
	    "use strict";    
	    var live_index, life;
	    Muryoma.Prefab.call(this, game_state, name, position, properties);
	    
	    this.visible = false;    
	    this.menu_items = properties.menu_items;    
	    this.current_item_index = 0; 
	    
	};
	
	Muryoma.Menu.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.Menu.prototype.constructor = Muryoma.Menu;
	
	Muryoma.Menu.prototype.process_input = function (event) {    
	    //console.log('menu process_input ', event.keyCode);
	    "use strict";
	    switch (event.keyCode) {
	    case Phaser.Keyboard.UP:
	        if (this.current_item_index > 0) {
	            // navigate to previous item
	            this.move_selection(this.current_item_index - 1);
	        }
	        break;
	    case Phaser.Keyboard.DOWN:
	        if (this.current_item_index < this.menu_items.length - 1) {
	            // navigate to next item
	            this.move_selection(this.current_item_index + 1);
	        }
	        break;
	    case Phaser.Keyboard.SPACEBAR:
	        this.menu_items[this.current_item_index].select();
	        break;
	    }   
	};
	
	Muryoma.Menu.prototype.update = function (item_index) {
	    "use strict";
	};
	
	
	Muryoma.Menu.prototype.move_selection = function (item_index) {
	    "use strict";
	    this.menu_items[this.current_item_index].selection_out();
	    this.current_item_index = item_index;
	    this.menu_items[this.current_item_index].selection_over();
	};
	
	Muryoma.Menu.prototype.find_item_index = function (text) {
	    "use strict";
	    var item_index;
	    for (item_index = 0; item_index < this.menu_items.length; item_index += 1) {
	        if (this.menu_items[item_index].text === text) {
	            return item_index;
	        }
	    }
	};
	
	Muryoma.Menu.prototype.remove_item = function (index) {
	    "use strict";
	    var menu_item;
	    menu_item = this.menu_items[index];
	    // remove menu item
	    this.menu_items.splice(index, 1);
	    // update current_item_index if necessary
	    if (this.current_item_index === index) {
	        this.current_item_index = 0;
	    }
	    return menu_item;
	};
	
	Muryoma.Menu.prototype.enable = function () {    
	    "use strict";
	    this.current_item_index = 0;
	    if (this.menu_items.length > 0) {
	        this.menu_items[this.current_item_index].selection_over();
	    }
	    
	    this.game_state.game.input.keyboard.addCallbacks(this, this.process_input);    
	};
	
	Muryoma.Menu.prototype.disable = function () {
	    "use strict";
	    /*
	    "use strict";
	    if (this.menu_items.length > 0) {
	        this.menu_items[this.current_item_index].selection_out();
	    }
	    this.current_item_index = 0;
	    */
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.EnemyMenuItem = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.MenuItem.call(this, game_state, name, position, properties);
	};
	
	Muryoma.EnemyMenuItem.prototype = Object.create(Muryoma.MenuItem.prototype);
	Muryoma.EnemyMenuItem.prototype.constructor = Muryoma.EnemyMenuItem;
	
	Muryoma.EnemyMenuItem.prototype.select = function () {
	    "use strict";
	    var enemy;
	    // get enemy prefab
	    enemy = this.game_state.prefabs[this.text];
	    // attack selected enemy
	    this.game_state.current_unit.attack(enemy);
	    // disable menus
	    this.game_state.prefabs.enemy_units_menu.disable();
	    this.game_state.prefabs.player_units_menu.disable();
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.PlayerMenuItem = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.MenuItem.call(this, game_state, name, position, properties);
	    
	    this.player_unit_health = new Muryoma.ShowStat(this.game_state, this.text + "_health", {x: 280, y: this.y}, {group: "hud", text: "", style: properties.style, prefab: this.text, stat: "health"});
	};
	
	Muryoma.PlayerMenuItem.prototype = Object.create(Muryoma.MenuItem.prototype);
	Muryoma.PlayerMenuItem.prototype.constructor = Muryoma.PlayerMenuItem;
	
	Muryoma.PlayerMenuItem.prototype.select = function () {
	    "use strict";
	};

/***/ },
/* 11 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.AttackMenuItem = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.MenuItem.call(this, game_state, name, position, properties);
	};
	
	Muryoma.AttackMenuItem.prototype = Object.create(Muryoma.MenuItem.prototype);
	Muryoma.AttackMenuItem.prototype.constructor = Muryoma.AttackMenuItem;
	
	Muryoma.AttackMenuItem.prototype.select = function () {
	    "use strict";
	    // disable actions menu
	    this.game_state.prefabs.actions_menu.disable();
	    // enable enemy units menu so the player can choose the target
	    this.game_state.prefabs.enemy_units_menu.enable();
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.BuildArea = function (game_state, layer) {
	    "use strict";
	
	    var name = 'build_area';    
	    var position = {x: 0, y: 0};
	    var height = 584;
	    var width = 1024;
	
	    // create a new bitmap data object
	    var bmd = game.add.bitmapData(width,height);   
	    
	    this.marker = new Muryoma.Marker(game_state, layer);
	
	    // draw to the canvas context like normal
	    bmd.ctx.beginPath();
	    bmd.ctx.rect(0,0,width,height);
	    //debug
	    //bmd.ctx.fillStyle = '#0B486B';        
	    //bmd.ctx.fill();
	
	    var properties = {group: 'hud', width: width, height: height, texture: bmd};
	
	    Muryoma.Prefab.call(this, game_state, name, position, properties);    
	
	    this.inputEnabled = true;
	    this.input.enableSnap(32, 32, false, true);
	    this.events.onInputOver.add(this.inputOver, this);
	    this.events.onInputOut.add(this.inputOut, this);
	    this.events.onInputDown.add(this.onInputDown, this);  
	};
	
	Muryoma.BuildArea.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.BuildArea.prototype.constructor = Muryoma.BuildArea;
	
	Muryoma.BuildArea.prototype.restore_tint = function () {
	    "use strict";
	    this.tint = 0xFFFFFF;
	};
	
	Muryoma.BuildArea.prototype.inputOver = function() {
	    "use strict";
	    /*
	    console.log('BuildArea inputOver');    
	    console.log('this.marker ', this.marker);
	    console.log('hud group ', this.game_state.groups.hud.children);
	    */
	    this.marker.visible = true;      
	};
	
	Muryoma.BuildArea.prototype.inputOut = function() {
	    "use strict";
	    console.log('BuildArea inputOut');    
	    this.marker.visible = false;  
	};
	
	Muryoma.BuildArea.prototype.onInputDown = function() {
	    "use strict";    
	    var childArray = this.game_state.groups.hud.children;    
	    var hud_menu = childArray.filter(function(a){ return a.name == 'hud_menu' })[0];        
	    var marker = childArray.filter(function(a){ return a.name == 'marker' })[0];
	
	    game.physics.arcade.enable([marker, this.game_state.groups.buildings]);    
	    var cBuildings = game.physics.arcade.collide(marker, this.game_state.groups.buildings, function(sprite1, sprite2){                      
	       return true;
	    });  
	
	    var cbp = hud_menu.current_blueprint; 
	    console.log('current_blueprint ', hud_menu.current_blueprint);
	    if(cbp && !cBuildings){
	        var x = layer.getTileX(game.input.activePointer.worldX) * 32;
	        var y = layer.getTileY(game.input.activePointer.worldY) * 32; 
	        var properties = {group:'buildings', texture: cbp.texture};   
	        new Muryoma.Building(this.game_state, cbp.key, {x:x, y:y}, properties);         
	        //hud_menu.current_blueprint = null;
	        //marker.kill();        
	    }   
	    
	};
	
	
	
	
	


/***/ },
/* 13 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.BlueprintMenu = function (game_state, name, position, properties) {
	    "use strict";
	    /*
	    console.log('---------------------');
	    console.log('game_state ', game_state);
	    console.log('name ', name);
	    console.log('position ', position);
	    */
	    
	    var live_index, life;
	    Muryoma.Prefab.call(this, game_state, name, position, properties);    
	    this.blueprintMenu_items = properties.menu_items;    
	    this.current_blueprint = null;   
	    this.colorDisabled();   
	};
	
	Muryoma.BlueprintMenu.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.BlueprintMenu.prototype.constructor = Muryoma.BlueprintMenu;
	
	Muryoma.BlueprintMenu.prototype.update = function (item_index) {
	    "use strict";    
	};
	
	Muryoma.BlueprintMenu.prototype.setCurrentBlueprint = function (blueprint) {
	    "use strict";    
	    console.log('setCurrentBlueprint ', blueprint);
	    
	    this.current_blueprint = blueprint;
	    var childArray = this.game_state.groups.hud.children;    
	    var marker = childArray.filter(function(a){ return a.name == 'marker' })[0];
	    marker.setDimensions(blueprint);
	    this.colorDisabled();
	    blueprint.tint = 0xFFFFFF;
	};
	
	Muryoma.BlueprintMenu.prototype.colorDisabled = function(){
	    "use strict";    
	    for (var i = this.blueprintMenu_items.length - 1; i >= 0; i--) {
	        this.blueprintMenu_items[i].tint = 0x75757;
	    };
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.BlueprintMenuItem = function (game_state, name, position, properties) {
	    "use strict";
	    /*
	    console.log('BlueprintMenuItem ---------------------');    
	    console.log('name ', name);
	    console.log('position ', position);
	    console.log('properties ', properties);
	    */
	
	    Muryoma.Prefab.call(this, game_state, name, position, properties);
	
	    this.inputEnabled = true;
	    //this.events.onInputOver.add(this.inputOver, this);
	    //this.events.onInputOut.add(this.inputOut, this);
	    this.events.onInputDown.add(this.onInputDown, this);
	    this.height = 64;
	    this.width = 64;
	};
	
	Muryoma.BlueprintMenuItem.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.BlueprintMenuItem.prototype.constructor = Muryoma.BlueprintMenuItem;
	
	Muryoma.BlueprintMenuItem.prototype.select = function () {
	    "use strict";
	    console.log('BlueprintMenuItem selected');
	    /*
	    var enemy;
	    // get enemy prefab
	    enemy = this.game_state.prefabs[this.text];
	    // attack selected enemy
	    this.game_state.current_unit.attack(enemy);
	    // disable menus
	    this.game_state.prefabs.enemy_units_menu.disable();
	    this.game_state.prefabs.player_units_menu.disable();
	    */
	};
	
	Muryoma.BlueprintMenuItem.prototype.onInputDown = function (){
	    console.log('BlueprintMenuItem clicked: ', this.name);     
	    this.game_state.prefabs.hud_menu.setCurrentBlueprint(this);
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.ShowStat = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.TextPrefab.call(this, game_state, name, position, properties);
	    
	    this.prefab = this.game_state.prefabs[properties.prefab];
	    this.stat = properties.stat;
	};
	
	Muryoma.ShowStat.prototype = Object.create(Muryoma.TextPrefab.prototype);
	Muryoma.ShowStat.prototype.constructor = Muryoma.ShowStat;
	
	Muryoma.ShowStat.prototype.update = function () {
	    "use strict";
	    this.text = this.prefab.stats[this.stat];
	};

/***/ },
/* 16 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.ActionMessage = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.Prefab.call(this, game_state, name, position, properties);
	    
	    this.anchor.setTo(0.5);
	    
	    // create message text
	    this.message_text = new Muryoma.TextPrefab(this.game_state, this.name + "_message", position, {group: "hud", text: properties.message, style: Object.create(this.game_state.TEXT_STYLE)});
	    this.message_text.anchor.setTo(0.5);
	    
	    // start timer to destroy the message
	    this.kill_timer = this.game_state.game.time.create();
	    this.kill_timer.add(Phaser.Timer.SECOND * properties.duration, this.kill, this);
	    this.kill_timer.start();
	};
	
	Muryoma.ActionMessage.prototype = Object.create(Muryoma.Prefab.prototype);
	Muryoma.ActionMessage.prototype.constructor = Muryoma.ActionMessage;
	
	Muryoma.ActionMessage.prototype.kill = function () {
	    "use strict";
	    Phaser.Sprite.prototype.kill.call(this);
	    // when the message is destroyed, call next turn
	    this.message_text.kill();
	    this.game_state.next_turn();
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	    /* Marker */
	    /* ---------------------------------------------------------------------------------------- */
	    
	
	    var Muryoma = Muryoma || {};
	
	    Muryoma.Marker = function (game_state, layer) {
	        "use strict";
	
	        var name = 'marker';    
	        var position = {x: 0, y: 0};
	        var height = 64;
	        var width = 64;
	        
	        // create a new bitmap data object
	        var bmd = game.add.bitmapData(width,height);
	
	        // draw to the canvas context like normal
	        bmd.ctx.beginPath();
	        bmd.ctx.rect(0,0,width,height);
	        //debug
	        //bmd.ctx.fillStyle = '#EACADD';      
	        //bmd.ctx.fill();
	
	        var properties = {group: 'hud', width: width, height: height, texture: bmd};
	
	        Muryoma.Prefab.call(this, game_state, name, position, properties);       
	        this.inputEnabled = true; 
	        this.input.boundsRect = layer;
	        this.input.enableSnap(32, 32, true, true);
	        this.enableBody = true;            
	    };
	
	    Muryoma.Marker.prototype = Object.create(Muryoma.Prefab.prototype);
	    Muryoma.Marker.prototype.constructor = Muryoma.Marker;
	    Muryoma.Marker.prototype.update = function(){   
	        this.x = layer.getTileX(game.input.activePointer.worldX) * 32;
	        this.y = layer.getTileY(game.input.activePointer.worldY) * 32;                
	    };
	
	    Muryoma.Marker.prototype.collisionHandler = function(sprite1, sprite2){         
	        console.log('collision ', sprite1);            
	    }
	
	    Muryoma.Marker.prototype.setDimensions = function(blueprint){
	        //console.log('blueprint ', blueprint);
	        this.texture = blueprint.texture;        
	        this.body = blueprint.body;       
	        this.alpha = 0.5;
	    }
	    /* ---------------------------------------------------------------------------------------- */


/***/ },
/* 18 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.StatManager = function (game_state, name, position, properties) {
	    "use strict";
	    Muryoma.Prefab.call(this, game_state, name, position, properties);    
	    this.visible = false; 
	  	var data = [];
	
	    this.mydata = game.add.text(position.x, position.y, '', Object.create(game_state.TEXT_STYLE));
	    this.mydata.parseList(data);
	
	    game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
	    this.counter = 0;
	
	
	    this.population = 0; //total population
	    this.supplySpace = 0; //space needed for the population
	
	};
	
	function updateCounter() {
	    this.counter++;    
	}
	
	Muryoma.StatManager.prototype = Object.create(Muryoma.TextPrefab.prototype);
	Muryoma.StatManager.prototype.constructor = Muryoma.StatManager;
	
	Muryoma.StatManager.prototype.update = function () {
	    "use strict"; 
	
	    var data = [
	    	[ 'Time', this.counter , '', '' ],        
	        [ 'Population', this.population, '', '' ],
	        [ 'Supply', this.supplySpace, '', '' ],        
	        
	    ];
	   this.mydata.parseList(data);
	};
	


/***/ },
/* 19 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.BootState = function () {
	    "use strict";
	    Phaser.State.call(this);
	};
	
	Muryoma.BootState.prototype = Object.create(Phaser.State.prototype);
	Muryoma.BootState.prototype.constructor = Muryoma.BootState;
	
	Muryoma.BootState.prototype.init = function (level_file, next_state) {
	    "use strict";
	    this.level_file = level_file;
	    this.next_state = next_state;
	};
	
	Muryoma.BootState.prototype.preload = function () {
	    "use strict";
	    this.load.text("level1", this.level_file);
	};
	
	Muryoma.BootState.prototype.create = function () {
	    "use strict";
	    var level_text, level_data;
	    level_text = this.game.cache.getText("level1");
	    level_data = JSON.parse(level_text);    
	    this.game.state.start("LoadingState", true, false, level_data, this.next_state);
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	var Muryoma = Muryoma || {};
	
	Muryoma.LoadingState = function () {
	    "use strict";
	    Phaser.State.call(this);
	};
	
	Muryoma.LoadingState.prototype = Object.create(Phaser.State.prototype);
	Muryoma.LoadingState.prototype.constructor = Muryoma.LoadingState;
	
	Muryoma.LoadingState.prototype.init = function (level_data, next_state) { 
	
	    "use strict";
	    this.level_data = level_data;
	    this.next_state = next_state;
	};
	
	Muryoma.LoadingState.prototype.preload = function () {
	    "use strict";
	    var assets, asset_loader, asset_key, asset;
	    assets = this.level_data.assets;
	    for (asset_key in assets) { // load assets according to asset key
	        if (assets.hasOwnProperty(asset_key)) {
	            asset = assets[asset_key];
	            switch (asset.type) {
	            case "image":
	                this.load.image(asset_key, asset.source);
	                break;
	            case "spritesheet":
	                this.load.spritesheet(asset_key, asset.source, asset.frame_width, asset.frame_height, asset.frames, asset.margin, asset.spacing);
	                break;
	            case "tilemap":
	                this.load.tilemap(asset_key, asset.source, null, Phaser.Tilemap.TILED_JSON);
	                break;
	            }
	        }
	    }
	};
	
	Muryoma.LoadingState.prototype.create = function () {
	    "use strict";
	    this.game.state.start(this.next_state, true, false, this.level_data);
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	console.log('ManageState');
	var Muryoma = Muryoma || {};
	
	Muryoma.ManageState = function () {
	    "use strict";
	    Phaser.State.call(this);
	    
	    this.prefab_classes = {
	        "background": Muryoma.TilePrefab.prototype.constructor,
	        "rectangle": Muryoma.Prefab.prototype.constructor,        
	        "blueprint": Muryoma.Blueprint.prototype.constructor
	    };
	    
	    this.TEXT_STYLE = {font: "14px Arial", fill: "#9a7b6e"};
	
	    this.SHORT_TIME = 3000;
	    this.MEDIUM_TIME = this.SHORT_TIME * 2;
	    this.LONG_TIME = tMEDIUM_TIME * 2;
	};
	
	Muryoma.ManageState.prototype = Object.create(Phaser.State.prototype);
	Muryoma.ManageState.prototype.constructor = Muryoma.ManageState;
	
	Muryoma.ManageState.prototype.init = function (level_data) {
	    //console.log('----------------');
	    //console.log('ManageState init');
	    
	    "use strict";
	    this.level_data = level_data;    
	    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
	    this.scale.pageAlignHorizontally = true;
	    this.scale.pageAlignVertically = true;
	};
	
	Muryoma.ManageState.prototype.create = function () {
	    //console.log('----------------');
	    //console.log('ManageState create');   
	
	    "use strict";
	    var group_name, prefab_name, player_unit_name, enemy_unit_name, layer, buildings;
	    
	    this.show_background();
	    
	
	    // create groups
	    this.groups = {};
	    this.level_data.groups.forEach(function (group_name) {        
	        this.groups[group_name] = this.game.add.group();
	    }, this);  
	
	    // create prefabs
	    this.prefabs = {};
	    for (prefab_name in this.level_data.prefabs) {        
	        if (this.level_data.prefabs.hasOwnProperty(prefab_name)) {
	            // create prefab
	            this.create_prefab(prefab_name, this.level_data.prefabs[prefab_name]);
	        }
	    };    
	
	    //this.add_mining_points();
	    
	    this.init_hud();    
	    // create units array with player and enemy units
	    this.units = [];
	    //this.units = this.units.concat(this.groups.player_units.children);
	    //this.units = this.units.concat(this.groups.enemy_units.children);
	    this.units = this.units.concat(this.groups.hud.children);        
	    //this.next_turn();
	};
	
	Muryoma.ManageState.prototype.create_prefab = function (prefab_name, prefab_data) {
	    "use strict";
	    /*
	    console.log('----------------');
	    console.log('ManageState create');
	    console.log('prefab_name ', prefab_name);
	    console.log('prefab_data ', prefab_data);
	    */    
	
	    var prefab;
	    // create object according to its type
	    if (this.prefab_classes.hasOwnProperty(prefab_data.type)) {
	        prefab = new this.prefab_classes[prefab_data.type](this, prefab_name, prefab_data.position, prefab_data.properties);
	    }
	};
	
	Muryoma.ManageState.prototype.init_hud = function () {
	    "use strict";
	    var unit_index, player_unit_health, build_area, stat_manager;
	
	    // show player actions
	    //this.show_player_actions({x: 106, y: 210});
	    
	    // show player units
	    //this.show_units("player_units", {x: 202, y: 210}, Muryoma.PlayerMenuItem.prototype.constructor);
	    
	    // show enemy units
	    //this.show_units("enemy_units", {x: 10, y: 210}, Muryoma.EnemyMenuItem.prototype.constructor);  
	
	    // show blueprints
	    this.show_blueprints("hud", {x: 10, y: 660}, Muryoma.BlueprintMenuItem.prototype.constructor);
	    //this.create_stats("hud", {x: 290, y: 665}, Muryoma.BlueprintMenuItem.prototype.constructor);
	    stat_manager = new Muryoma.StatManager(this, "stat_manager", {x: 290, y: 665}, {group: "hud"})
	    build_area = new Muryoma.BuildArea(this, layer);      
	
	};
	
	Muryoma.ManageState.prototype.show_blueprints = function (group_name, position, menu_item_constructor) {    
	    "use strict";    
	
	    //console.log('---------------------');
	    //console.log('group_name ', group_name);
	    //console.log('this.groups ', this.groups);
	    var bp_index, menu_items, bp_menu_item, bp_menu;
	    
	    bp_index = 0;
	    menu_items = []; 
	
	    for (var key in this.level_data.bp) {
	        var item = this.level_data.bp[key];
	        bp_menu_item = new menu_item_constructor(this, key + "_menu_item", {x: position.x + bp_index * 80, y: position.y + 5}, {group: "hud", text: key, texture: item.properties.texture});
	        bp_index += 1;
	        menu_items.push(bp_menu_item);
	    }  
	
	    bp_menu = new Muryoma.BlueprintMenu(this, group_name + "_menu", position, {group: "hud", menu_items: menu_items});    
	    
	};
	
	Muryoma.ManageState.prototype.show_background = function() {
	    
	   var map;
	   var data = '';  
	
	    for (var y = 0; y < 50; y++){
	        for (var x = 0; x < 50; x++){
	            //data += this.game.rnd.between(0, 4).toString();
	            data += 0 //underdark
	            if (x < 49){
	                data += ',';
	            }
	        }
	        if (y < 49){
	            data += "\n";
	        }
	    }                  
	
	    this.game.cache.addTilemap('dynamicMap', null, data, Phaser.Tilemap.CSV);
	
	    //  Create our map (the 32x32 is the tile size)        
	    map = this.game.add.tilemap('dynamicMap', 32, 32);
	
	    //  'tiles' = cache image key, 32x32 = tile size
	    //map.addTilesetImage('ground_1x1', 'ground_1x1', 32, 32);
	    map.addTilesetImage('darkcave', 'darkcave', 32, 32);
	
	    //  0 is important
	    //layer = map.createLayer(0);  
	    layer = map.createLayer(0, 1024, 648);  
	    layer.resizeWorld();
	};
	
	
	Muryoma.ManageState.prototype.add_mining_points = function(){
	
	    /* const */
	    var NR_MINING_POINTS = 5;    
	    var WORLD_HEIGHT = 800;
	    var WORLD_WIDTH = 600;
	
	    /* Mining points */
	    
	    var resources = this.game.add.physicsGroup(Phaser.Physics.ARCADE);
	    console.log('gamestate ', this);
	    this.groups['resources'] = resources;
	
	    
	    var i, x, y;
	    for(i = 0; i < NR_MINING_POINTS; i++) {            
	        x = randStep(0, WORLD_WIDTH - 96, 32);    
	        y = randStep(0, WORLD_HEIGHT - 192 , 32);       
	        new Muryoma.MiningPoint(this, {x: x, y: y});
	
	    }  
	    resources.setAll('body.collideWorldBounds', true);  
	    resources.setAll('body.immovable', true);
	    
	    /* get random number at definite step, used for grid coordinates at step of 32px*/        
	    function randStep(min, max, step) {
	        return min + (step * Math.floor(Math.random()*(max-min)/step) );
	    }
	
	}
	
	
	Muryoma.ManageState.prototype.show_units = function (group_name, position, menu_item_constructor) {
	    /*
	    "use strict";
	    var unit_index, menu_items, unit_menu_item, units_menu;
	
	    // create units menu items
	    unit_index = 0;
	    menu_items = [];
	    this.groups[group_name].forEach(function (unit) {
	        unit_menu_item = new menu_item_constructor(this, unit.name + "_menu_item", {x: position.x, y: position.y + unit_index * 20}, {group: "hud", text: unit.name, style: Object.create(this.TEXT_STYLE)});
	        unit_index += 1;
	        menu_items.push(unit_menu_item);
	    }, this);
	    // create units menu
	    units_menu = new Muryoma.Menu(this, group_name + "_menu", position, {group: "hud", menu_items: menu_items});      
	    */
	};
	
	Muryoma.ManageState.prototype.show_player_actions = function (position) {
	    /*
	    "use strict";
	    var actions, actions_menu_items, action_index, actions_menu;
	    // available actions
	    actions = [{text: "Attack", item_constructor: Muryoma.AttackMenuItem.prototype.constructor}];
	    actions_menu_items = [];
	    action_index = 0;
	    // create a menu item for each action
	    actions.forEach(function (action) {
	        actions_menu_items.push(new action.item_constructor(this, action.text + "_menu_item", {x: position.x, y: position.y + action_index * 20}, {group: "hud", text: action.text, style: Object.create(this.TEXT_STYLE)}));
	        action_index += 1;
	    }, this);
	    actions_menu = new Muryoma.Menu(this, "actions_menu", position, {group: "hud", menu_items: actions_menu_items});
	    */
	};
	
	Muryoma.ManageState.prototype.next_turn = function () {
	    /*
	    "use strict";
	    // takes the next unit
	    this.current_unit = this.units.shift();
	    // if the unit is alive, it acts, otherwise goes to the next turn
	    if (this.current_unit.alive) {
	        this.current_unit.act();
	        this.units.push(this.current_unit);
	    } else {
	        this.next_turn();
	    }
	    */
	};
	
	Muryoma.ManageState.prototype.render = function(){
	    /*
	    game.debug.cameraInfo(game.camera, 32, 32);                                   
	    */
	    for (var group in this.groups){                
	         game.debug.body(group);
	    } 
	}
	
	
	
	
	


/***/ },
/* 22 */
/***/ function(module, exports) {

	alert('Main');
	var Muryoma = Muryoma || {};
	var game = new Phaser.Game(1024, 768, Phaser.CANVAS);
	game.state.add("BootState", new Muryoma.BootState());
	game.state.add("LoadingState", new Muryoma.LoadingState());
	game.state.add("ManageState", new Muryoma.ManageState());
	game.state.start("BootState", true, false, "assets/levels/manage.json", "ManageState");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,